{"version":3,"sources":["Components/SearchResults.js","Components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["SeacrhResults","react_default","a","createElement","className","this","props","results","map","image","src","urls","small","key","id","React","Component","API_KEY","concat","process","SearchBar","state","value","searchResult","handleChange","e","_this","setState","target","handleSubmit","preventDefault","searchValue","console","log","axios","get","then","res","data","onSubmit","class","type","placeholder","onChange","SearchResults","App","Components_SearchBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAmBeA,0LAdX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVC,KAAKC,MAAMC,QAAQC,IAAI,SAAAC,GAAK,OACzBR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWM,IAAKD,EAAME,KAAKC,MACrCC,IAAKJ,EAAMK,gBARNC,IAAMC,6BCE5BC,EAAO,GAAAC,OAAMC,oEA6CJC,6MA1CVC,MAAQ,CACJC,MAAO,GACPC,aAAa,MAGjBC,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVL,MAAOG,EAAEG,OAAON,WAGxBO,aAAe,SAACJ,GACZA,EAAEK,iBACF,IAAMC,EAAcL,EAAKL,MAAMC,MAC/BU,QAAQC,IAAIF,GACZG,IAAMC,IAAN,qDAAAjB,OAA+DD,EAA/D,6CAAAC,OAAkHa,EAAlH,MAAkIK,KAAK,SAAAC,GACnIX,EAAKC,SAAS,CACVJ,aAAcc,EAAIC,KAAK/B,qFAQpC,OACEN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMoC,SAAUlC,KAAKwB,aAAczB,UAAU,oBACrCH,EAAAC,EAAAC,cAAA,SACMqC,MAAM,kBACNC,KAAK,OACLnB,MAAOjB,KAAKgB,MAAMC,MAClBoB,YAAY,mBACZC,SAAUtC,KAAKmB,eAE7BvB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcqC,KAAK,UAASxC,EAAAC,EAAAC,cAAA,KAAGqC,MAAM,mBAEvDvC,EAAAC,EAAAC,cAACyC,EAAD,CAAerC,QAASF,KAAKgB,MAAME,uBArCpBR,IAAMC,WCShB6B,mLARX,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAC2C,EAAD,cAJY9B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f47db200.chunk.js","sourcesContent":["import React  from 'react'\n\nclass SeacrhResults extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"image-results\">\n          {this.props.results.map(image => (\n              <div>\n                  <img className=\"img-list\" src={image.urls.small}\n                       key={image.id}/>\n              </div>\n\n          ))}\n      </div>\n    )\n  }\n}\n\nexport default SeacrhResults","import React from 'react'\nimport SearchResults from './SearchResults'\nimport axios from 'axios';\n\nconst API_KEY = `${process.env.REACT_APP_IMAGE_SEARCH}`\n\n class SearchBar extends React.Component {\n     state = {\n         value: \"\",\n         searchResult:[]\n     }\n\n     handleChange = (e) =>{\n         this.setState({\n             value: e.target.value\n         })\n     }\n     handleSubmit = (e) => {\n         e.preventDefault()\n         const searchValue = this.state.value\n         console.log(searchValue)\n         axios.get(`https://api.unsplash.com/search/photos/?client_id=${API_KEY}&per_page=15&orientation=landscape&query=${searchValue}}`).then(res => {\n             this.setState({\n                 searchResult: res.data.results\n             })\n     \n })\n     }\n     \n\n  render() {\n    return (\n      <div>\n          <form onSubmit={this.handleSubmit} className=\"search-container\">\n                  <input\n                        class=\"field-container\"\n                        type='text'\n                        value={this.state.value}\n                        placeholder=\"Search Images...\"\n                        onChange={this.handleChange}/>\n             \n          <button className=\"btn-warning\" type=\"submit\"><i class=\"fa fa-search\"></i></button>\n          </form>\n          <SearchResults results={this.state.searchResult}/>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport SearchBar from './Components/SearchBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container\">\n      <SearchBar/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}